datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider      = "prisma-client-js"
  binaryTargets = ["native", "linux-musl"]
}

enum ImageSize {
  EXTRA_SMALL
  SMALL
  MEDIUM
  LARGE
  EXTRA_LARGE
  UNKNOWN
}

model Image {
  hash           String    @id @db.VarChar(40)
  image_resource String    @db.VarChar(40)
  size           ImageSize @default(UNKNOWN)
  url            String    @db.VarChar(256)

  ImageResource ImageResource? @relation(fields: [image_resource], references: [hash])
}

enum ImageResourceSource {
  SPOTIFY
  DEEZER
  LASTFM
}

model ImageResource {
  hash     String              @id @db.VarChar(40)
  explicit Boolean?
  active   Boolean             @default(true)
  source   ImageResourceSource

  palette_vibrant       String? @db.Char(7)
  palette_dark_vibrant  String? @db.Char(7)
  palette_light_vibrant String? @db.Char(7)
  palette_muted         String? @db.Char(7)
  palette_dark_muted    String? @db.Char(7)
  palette_light_muted   String? @db.Char(7)

  images Image[]

  created_at DateTime @default(now())
  Artist     Artist?  @relation(fields: [artistHash], references: [hash])
  artistHash String?  @db.VarChar(40)
  Album      Album?   @relation(fields: [albumHash], references: [hash])
  albumHash  String?  @db.VarChar(40)
  Track      Track?   @relation(fields: [trackHash], references: [hash])
  trackHash  String?  @db.VarChar(40)
}

model Artist {
  hash       String          @id @db.VarChar(40)
  name       String          @db.Text
  spotify_id String?         @db.VarChar(22)
  deezer_id  Int?
  resources  ImageResource[]
  genres     String[]        @db.Text
  tags       String[]        @db.Text
  similar    String[]        @db.Text

  created_at DateTime  @default(now())
  updated_at DateTime?
}

model Album {
  hash    String   @id @db.VarChar(40)
  name    String   @db.Text
  artists String[] @db.Text

  spotify_id String? @db.VarChar(22)
  deezer_id  Int?

  resources ImageResource[]

  release_date String?   @db.VarChar(16)
  created_at   DateTime  @default(now())
  updated_at   DateTime?
}

model Track {
  hash String @id @db.VarChar(40)

  name    String   @db.Text
  artists String[] @db.Text
  album   String   @db.Text

  spotify_id String? @db.VarChar(22)
  deezer_id  Int?
  genius_id  Int?

  resources ImageResource[]

  duration Int?    @db.Integer // ms
  preview  String? @db.VarChar(255)

  created_at DateTime  @default(now())
  updated_at DateTime?

  features                TrackFeatures? @relation(fields: [trackFeaturesSpotify_id], references: [spotify_id])
  trackFeaturesSpotify_id String?        @db.VarChar(22)
}

model TrackFeatures {
  spotify_id String @id @db.VarChar(22)

  danceability     Float   @db.DoublePrecision
  energy           Float   @db.DoublePrecision
  loudness         Float   @db.DoublePrecision
  speechiness      Float   @db.DoublePrecision
  acousticness     Float   @db.DoublePrecision
  instrumentalness Float   @db.DoublePrecision
  liveness         Float   @db.DoublePrecision
  valence          Float   @db.DoublePrecision
  tempo            Float   @db.DoublePrecision
  Track            Track[]
}
